import UIKit
var primes=[Int]()//定义可变数组
for i in 2...100{
    var IsPrime = true
    for j in 2..<i{
        if i%j==0{//能够整除
            IsPrime = false
        }
    }
    if IsPrime{
        primes.append(i)//将元素加入数组
    }
}//找出1-100所有素数
//排序
func descending(x:Int,y:Int)->Bool{
    return x>y
}
primes.sort(by:descending)
print(primes)
primes.sort{(x:Int,y:Int)->Bool in
    x>y
}
print(primes)
primes.sort{(x,y)->Bool in
    return x>y
}
print(primes)
primes.sort{(x,y) in
    x>y
}
print(primes)
primes.sort{$0>$1}
print(primes)
primes.sort(by:{return $0>$1})
print(primes)
primes.sort(by:>)
print(primes)

enum Gender:Int{
    case male
    case female
    static func >(a1:Gender,a2:Gender)->Bool{
        return a1.rawValue<a2.rawValue}
};
class Person: CustomStringConvertible{//Person类
    var firstName:String
    var lastName:String
    var age:Int
    var gender:Gender
    var fullName:String{
        get{return firstName+lastName}
    }
    init(firstName:String,lastName:String,age:Int,gender:Gender){//构造函数
        self.lastName=lastName
        self.firstName=firstName
        self.age=age
        self.gender=gender
    }
    convenience init(firstName:String,lastName:String){//便利构造函数
        self.init(firstName: firstName, lastName: lastName,age:0,gender:Gender.male)
    }
    //实现判断==和！=功能
    static func ==(a1:Person,a2:Person)->Bool{
        return a1.fullName==a2.fullName
    }
    static func !=(a1:Person,a2:Person)->Bool{
        return !(a1==a2)
    }
    //使之能够直接print
    var description:String{
        return "全名:\(self.fullName)年龄:\(self.age)性别:\(self.gender)"
    }
}
class Teacher:Person{//Teacher类，继承Person类
    var title:String
    //构造函数
    init(firstName: String, lastName: String, age: Int, gender: Gender,title:String) {
        self.title=title
        super.init(firstName: firstName, lastName: lastName, age: age, gender: gender)
    }
    //便利构造函数
    convenience init(firstName:String,lastName:String){
        self.init(firstName: firstName, lastName: lastName, age: 20, gender:.male, title: "hi")
    }
    //重写函数
    override var description: String{
        return "标题:\(title)\(super.description)"
    }
}
class Student: Person {//Student类，继承Person类
    var stuNo:Int
    //构造函数
    init(firstName: String, lastName: String, age: Int, gender: Gender,stuNo:Int) {
        self.stuNo=stuNo
        super.init(firstName: firstName, lastName: lastName, age: age, gender: gender)
    }
    //便利构造函数
    convenience init(firstName: String, lastName: String) {
        self.init(firstName: firstName, lastName: lastName, age: 20, gender: .female, stuNo: 101)
    }
    //重写函数
    override var description: String{
        return "\(super.description)学号:\(stuNo)"
    }
}
//构建对象
var p1=Person(firstName: "cao", lastName: "qin", age: 18, gender: .male)
var p2=Person(firstName: "cao", lastName: "yu", age: 20, gender: .female)
var t1=Teacher(firstName: "bao", lastName: "bei", age: 18, gender: .male, title: "hello")
var t2=Teacher(firstName: "bao", lastName: "xin", age: 20, gender: .female, title: "hi")
var s1=Student(firstName: "chen", lastName: "ting", age: 18, gender: .male, stuNo: 101)
var s2=Student(firstName: "chen", lastName: "ya", age: 20, gender: .female, stuNo: 102)
print(p1)//测试直接print
print(p1==p2)//测试能否判等
var persons=[Person]()//构建数组
persons.append(p1)
persons.append(p2)
persons.append(t1)
persons.append(t2)
persons.append(s1)
persons.append(s2)//将对象加入数组
var dictionary=["Person":0,"Teacher":0,"Student":0]
//通过字典统计对象个数
for traversearray in persons{
    if traversearray is Student {dictionary["Student"]! += 1}
    else if traversearray is Teacher {dictionary["Teacher"]! += 1}
    else {dictionary["Person"]! += 1}
}
print("输出字典内容：")
for(key,value) in dictionary{
    print("\(key):\(value)个")
}
//按不同规则排序
print("按age排序：")
persons.sort(by: {return $0.age<$1.age})
for traversearray in persons{print(traversearray)}
print("按fullName排序：")
persons.sort(by: {return $0.fullName<$1.fullName})
for traversearray in persons{print(traversearray)}
print("按gender+age排序：")
persons.sort(by: {return ($0.gender>$1.gender)&&($0.age>$1.age)})
for traversearray in persons{print(traversearray)}


